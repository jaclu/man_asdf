#!/bin/sh
__version="2.0  2024-10-09"
#
#  Copyright (c) 2021,2022,2024: Jacob.Lundqvist@gmail.com
#  License: MIT
#
#  Part of https://github.com/jaclu/man_asdf
#
#
#  Displays version specific man pages for asdf items, that contains a man page
#
#  TODO: 21-10-01 Find a tmux plugin where the bin is not named as the plugin,
#                 but it does have man pages, and see if that case can be handled.
#                 maven is one such where the bin is mvn,
#                 but since it doesn't have man pages, it isn't a good test candidate
#

error_msg() {
    msg="$1"
    [ -z "$msg" ] && msg "error_msg called without msg"
    echo "ERROR: $msg"
    exit 1
}


show_help() {
    echo "$prog_name $__version"
    echo
    echo "Syntax:  $prog_name [-h --help] page [alt_version]"
    echo "  alt_version must still be installed in order to be viewed!"
    echo
    echo "If page was not an asdf_comman, the system man is used instead"
    echo "So this can be named man and put in path before the normal man"
    echo
    echo "If this is an asdf command, its man page will be displayed"
    echo "Please note that not all asdf commands come with man pages"
    echo "in such cases you will get a notification stating such."
    echo
    echo "If you supply a version, that versions man page will be displayed."
    echo "When no version is specified, the current asdf version is assumed."
    echo
    echo "Examples: man_asdf python"
    echo "          man_asdf python 3.9.7"
    echo "          man_asdf python system"
}

display_system_man_page() {
    $real_man "$man_page"
    exit 0
}


#================================================================
#
#   Main
#

prog_name=$(basename "$0")
man_page="$1"
alt_version="$2"

# ignore any aliases and skip this custom man, find the real one
# shellcheck disable=SC2230
real_man="$(which -a man | grep ^/ | grep -v "$0"| tail -n 1)"
[ -z "$real_man" ] && error_msg "no system man found"

man_base_path="share/man"

case $man_page in
    "" | "-h" | "--help" | "?" )
        #
        #   No param or help requested
        #
        show_help
        exit 1
        ;;
    *) ;;
esac

# asdf not active, use regular man
command -v asdf >/dev/null || display_system_man_page

#
#  If asdf is not active but found in its usual place, use that to try to
#  find man page
#
if [ -z "$ASDF_DATA_DIR" ] && [ -d "$HOME/.asdf" ]; then
    ASDF_DATA_DIR="$HOME/.asdf"
fi

if ! asdf plugin list | grep -q "$man_page"; then
    # was not an asdf cmd
    display_system_man_page
fi


#
#  in case the cmd is not named as the plugin, this filters out the message:
#  unknown command: X. Perhaps you have to reshim?
#
_b="$(asdf which "$man_page" 2> /dev/null)"
bp_tmux_cmd="${_b%/bin/*}"

if [ -n "$alt_version" ]; then
    if [ "$alt_version" = "system" ]; then
        display_system_man_page
    fi
    version="$alt_version"
    bp_tmux_cmd="${ASDF_DATA_DIR}/installs/${man_page}/${version}"
    if [ ! -d "$bp_tmux_cmd" ]; then
        error_msg "$man_page version: $version is not installed!"
    fi
elif asdf current "$man_page" | grep -q " system "; then
    display_system_man_page
else
    # check if there even is any man pages for this command
    version="$(asdf current "$man_page" | awk '{print $2}')"
    bp_tmux_cmd="${ASDF_DATA_DIR}/installs/${man_page}/${version}"
fi

[ -z "$bp_tmux_cmd" ] && error_msg "failed to find base path for: $man_page"

man_path="${bp_tmux_cmd}/$man_base_path"
[ ! -d "$man_path" ] && {
    error_msg "this asdf command does not seem to have any man page"
}

f_man=$(find "${man_path}/man1" -mindepth 1  -print -quit)
[ -z "$f_man" ] && error_msg "man_page not found in ${man_path}/man1"

echo "Displaying asdf man page for: $man_page $version"
$real_man -M "$man_path" "$f_man" 
